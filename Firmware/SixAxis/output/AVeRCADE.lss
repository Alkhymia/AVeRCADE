
output/AVeRCADE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000009cc  00000a60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  00800104  00800104  00000a64  2**0
                  ALLOC
  3 .stab         000007b0  00000000  00000000  00000a64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000017d  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001391  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000080  00000000  00000000  000013c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000e3a  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005ac  00000000  00000000  0000227a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000005ea  00000000  00000000  00002826  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000ac  00000000  00000000  00002e10  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000502  00000000  00000000  00002ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000078b  00000000  00000000  000033be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000140  00000000  00000000  00003b49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__ctors_end>
   4:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_1>
   8:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
   c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  10:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  14:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  18:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  1c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  20:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  24:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  28:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  2c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  30:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  34:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  38:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  3c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  40:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  44:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  48:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  4c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  50:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  54:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  58:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  5c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  60:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  64:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>

00000068 <usbDescriptorHidReport>:
  68:	05 01 09 05 a1 01 a1 00 05 09 19 01 29 0c 15 00     ............)...
  78:	25 01 95 0c 75 01 81 02 95 04 75 01 81 03 05 01     %...u.....u.....
  88:	09 30 09 31 09 32 09 33 09 34 09 35 15 81 25 7f     .0.1.2.3.4.5..%.
  98:	75 08 95 06 81 02 c0 c0                             u.......

000000a0 <usbDescriptorConfiguration>:
  a0:	09 02 22 00 01 01 00 80 64 09 04 00 00 01 03 00     ..".....d.......
  b0:	00 00 09 21 01 01 00 01 22 38 00 07 05 81 03 08     ...!...."8......
  c0:	00 0a                                               ..

000000c2 <usbDescriptorDevice>:
  c2:	12 01 10 01 00 00 00 08 c0 16 dc 27 00 01 01 02     ...........'....
  d2:	00 01                                               ..

000000d4 <usbDescriptorStringDevice>:
  d4:	12 03 41 00 56 00 65 00 52 00 43 00 41 00 44 00     ..A.V.e.R.C.A.D.
  e4:	45 00                                               E.

000000e6 <usbDescriptorStringVendor>:
  e6:	2a 03 64 00 61 00 6e 00 6a 00 6f 00 76 00 69 00     *.d.a.n.j.o.v.i.
  f6:	63 00 40 00 68 00 6f 00 74 00 6d 00 61 00 69 00     c.@.h.o.t.m.a.i.
 106:	6c 00 2e 00 63 00 6f 00 6d 00                       l...c.o.m.

00000110 <usbDescriptorString0>:
 110:	04 03 09 04                                         ....

00000114 <__ctors_end>:
 114:	11 24       	eor	r1, r1
 116:	1f be       	out	0x3f, r1	; 63
 118:	cf ef       	ldi	r28, 0xFF	; 255
 11a:	d8 e0       	ldi	r29, 0x08	; 8
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	cd bf       	out	0x3d, r28	; 61

00000120 <__do_copy_data>:
 120:	11 e0       	ldi	r17, 0x01	; 1
 122:	a0 e0       	ldi	r26, 0x00	; 0
 124:	b1 e0       	ldi	r27, 0x01	; 1
 126:	ec ec       	ldi	r30, 0xCC	; 204
 128:	f9 e0       	ldi	r31, 0x09	; 9
 12a:	02 c0       	rjmp	.+4      	; 0x130 <__do_copy_data+0x10>
 12c:	05 90       	lpm	r0, Z+
 12e:	0d 92       	st	X+, r0
 130:	a4 30       	cpi	r26, 0x04	; 4
 132:	b1 07       	cpc	r27, r17
 134:	d9 f7       	brne	.-10     	; 0x12c <__do_copy_data+0xc>

00000136 <__do_clear_bss>:
 136:	21 e0       	ldi	r18, 0x01	; 1
 138:	a4 e0       	ldi	r26, 0x04	; 4
 13a:	b1 e0       	ldi	r27, 0x01	; 1
 13c:	01 c0       	rjmp	.+2      	; 0x140 <.do_clear_bss_start>

0000013e <.do_clear_bss_loop>:
 13e:	1d 92       	st	X+, r1

00000140 <.do_clear_bss_start>:
 140:	ac 34       	cpi	r26, 0x4C	; 76
 142:	b2 07       	cpc	r27, r18
 144:	e1 f7       	brne	.-8      	; 0x13e <.do_clear_bss_loop>
 146:	0e 94 48 02 	call	0x490	; 0x490 <main>
 14a:	0c 94 c8 04 	jmp	0x990	; 0x990 <exit>

0000014e <__bad_interrupt>:
 14e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000152 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 152:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 154:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 156:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 158:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 15a:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 15c:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 15e:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 160:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 162:	09 c0       	rjmp	.+18     	; 0x176 <usbCrcLoopEntry>

00000164 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 164:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 166:	82 27       	eor	r24, r18

00000168 <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 168:	97 95       	ror	r25
    ror     resCrcL
 16a:	87 95       	ror	r24
    brcs    usbCrcNoXor
 16c:	10 f0       	brcs	.+4      	; 0x172 <usbCrcNoXor>
    eor     resCrcL, polyL
 16e:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 170:	95 27       	eor	r25, r21

00000172 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 172:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 174:	c8 f3       	brcs	.-14     	; 0x168 <usbCrcBitLoop>

00000176 <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 176:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 178:	a8 f3       	brcs	.-22     	; 0x164 <usbCrcByteLoop>

0000017a <usbCrcReady>:
usbCrcReady:
    ret
 17a:	08 95       	ret

0000017c <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 17c:	ea df       	rcall	.-44     	; 0x152 <usbCrc16>
    st      ptr+, resCrcL
 17e:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 180:	9d 93       	st	X+, r25
    ret
 182:	08 95       	ret

00000184 <__vector_1>:
;max allowable interrupt latency: 34 cycles -> max 25 cycles interrupt disable
;max stack usage: [ret(2), YL, SREG, YH, shift, x1, x2, x3, cnt, x4] = 11 bytes
;Numbers in brackets are maximum cycles since SOF.
USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], YH, shift, x1, x2, x3, cnt
    push    YL              ;2 [35] push only what is necessary to sync with edge ASAP
 184:	cf 93       	push	r28
    in      YL, SREG        ;1 [37]
 186:	cf b7       	in	r28, 0x3f	; 63
    push    YL              ;2 [39]
 188:	cf 93       	push	r28

0000018a <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 18a:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 18c:	4b 9b       	sbis	0x09, 3	; 9
    brne    waitForJ        ; just make sure we have ANY timeout
 18e:	e9 f7       	brne	.-6      	; 0x18a <waitForJ>

00000190 <waitForK>:
waitForK:
;The following code results in a sampling window of 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS
 190:	4b 9b       	sbis	0x09, 3	; 9
    rjmp    foundK
 192:	09 c0       	rjmp	.+18     	; 0x1a6 <foundK>
    sbis    USBIN, USBMINUS
 194:	4b 9b       	sbis	0x09, 3	; 9
    rjmp    foundK
 196:	07 c0       	rjmp	.+14     	; 0x1a6 <foundK>
    sbis    USBIN, USBMINUS
 198:	4b 9b       	sbis	0x09, 3	; 9
    rjmp    foundK
 19a:	05 c0       	rjmp	.+10     	; 0x1a6 <foundK>
    sbis    USBIN, USBMINUS
 19c:	4b 9b       	sbis	0x09, 3	; 9
    rjmp    foundK
 19e:	03 c0       	rjmp	.+6      	; 0x1a6 <foundK>
    sbis    USBIN, USBMINUS
 1a0:	4b 9b       	sbis	0x09, 3	; 9
    rjmp    foundK
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 1a4:	a3 c0       	rjmp	.+326    	; 0x2ec <sofError>

000001a6 <foundK>:
foundK:
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 4 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    YH                  ;2 [2]
 1a6:	df 93       	push	r29
    lds     YL, usbInputBufOffset;2 [4]
 1a8:	c0 91 2f 01 	lds	r28, 0x012F
    clr     YH                  ;1 [5]
 1ac:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));1 [6]
 1ae:	ca 5c       	subi	r28, 0xCA	; 202
    sbci    YH, hi8(-(usbRxBuf));1 [7]
 1b0:	de 4f       	sbci	r29, 0xFE	; 254

    sbis    USBIN, USBMINUS ;1 [8] we want two bits K [sample 1 cycle too early]
 1b2:	4b 9b       	sbis	0x09, 3	; 9
    rjmp    haveTwoBitsK    ;2 [10]
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <haveTwoBitsK>
    pop     YH              ;2 [11] undo the push from before
 1b6:	df 91       	pop	r29
    rjmp    waitForK        ;2 [13] this was not the end of sync, retry
 1b8:	eb cf       	rjmp	.-42     	; 0x190 <waitForK>

000001ba <haveTwoBitsK>:
haveTwoBitsK:
;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
    push    shift           ;2 [16]
 1ba:	2f 93       	push	r18
    push    x1              ;2 [12]
 1bc:	0f 93       	push	r16
    push    x2              ;2 [14]
 1be:	1f 93       	push	r17

    in      x1, USBIN       ;1 [17] <-- sample bit 0
 1c0:	09 b1       	in	r16, 0x09	; 9
    ldi     shift, 0xff     ;1 [18]
 1c2:	2f ef       	ldi	r18, 0xFF	; 255
    bst     x1, USBMINUS    ;1 [19]
 1c4:	03 fb       	bst	r16, 3
    bld     shift, 0        ;1 [20]
 1c6:	20 f9       	bld	r18, 0
    push    x3              ;2 [22]
 1c8:	4f 93       	push	r20
    push    cnt             ;2 [24]
 1ca:	3f 93       	push	r19
    
    in      x2, USBIN       ;1 [25] <-- sample bit 1
 1cc:	19 b1       	in	r17, 0x09	; 9
    ser     x3              ;1 [26] [inserted init instruction]
 1ce:	4f ef       	ldi	r20, 0xFF	; 255
    eor     x1, x2          ;1 [27]
 1d0:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;1 [28]
 1d2:	03 fb       	bst	r16, 3
    bld     shift, 1        ;1 [29]
 1d4:	21 f9       	bld	r18, 1
    ldi     cnt, USB_BUFSIZE;1 [30] [inserted init instruction]
 1d6:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit2          ;2 [32]
 1d8:	31 c0       	rjmp	.+98     	; 0x23c <rxbit2>

000001da <unstuff0>:
;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------

unstuff0:               ;1 (branch taken)
    andi    x3, ~0x01   ;1 [15]
 1da:	4e 7f       	andi	r20, 0xFE	; 254
    mov     x1, x2      ;1 [16] x2 contains last sampled (stuffed) bit
 1dc:	01 2f       	mov	r16, r17
    in      x2, USBIN   ;1 [17] <-- sample bit 1 again
 1de:	19 b1       	in	r17, 0x09	; 9
    ori     shift, 0x01 ;1 [18]
 1e0:	21 60       	ori	r18, 0x01	; 1
    rjmp    didUnstuff0 ;2 [20]
 1e2:	28 c0       	rjmp	.+80     	; 0x234 <didUnstuff0>

000001e4 <unstuff1>:

unstuff1:               ;1 (branch taken)
    mov     x2, x1      ;1 [21] x1 contains last sampled (stuffed) bit
 1e4:	10 2f       	mov	r17, r16
    andi    x3, ~0x02   ;1 [22]
 1e6:	4d 7f       	andi	r20, 0xFD	; 253
    ori     shift, 0x02 ;1 [23]
 1e8:	22 60       	ori	r18, 0x02	; 2
    nop                 ;1 [24]
 1ea:	00 00       	nop
    in      x1, USBIN   ;1 [25] <-- sample bit 2 again
 1ec:	09 b1       	in	r16, 0x09	; 9
    rjmp    didUnstuff1 ;2 [27]
 1ee:	29 c0       	rjmp	.+82     	; 0x242 <didUnstuff1>

000001f0 <unstuff2>:

unstuff2:               ;1 (branch taken)
    andi    x3, ~0x04   ;1 [29]
 1f0:	4b 7f       	andi	r20, 0xFB	; 251
    ori     shift, 0x04 ;1 [30]
 1f2:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2      ;1 [31] x2 contains last sampled (stuffed) bit
 1f4:	01 2f       	mov	r16, r17
    nop                 ;1 [32]
 1f6:	00 00       	nop
    in      x2, USBIN   ;1 [33] <-- sample bit 3
 1f8:	19 b1       	in	r17, 0x09	; 9
    rjmp    didUnstuff2 ;2 [35]
 1fa:	2b c0       	rjmp	.+86     	; 0x252 <didUnstuff2>

000001fc <unstuff3>:

unstuff3:               ;1 (branch taken)
    in      x2, USBIN   ;1 [34] <-- sample stuffed bit 3 [one cycle too late]
 1fc:	19 b1       	in	r17, 0x09	; 9
    andi    x3, ~0x08   ;1 [35]
 1fe:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08 ;1 [36]
 200:	28 60       	ori	r18, 0x08	; 8
    rjmp    didUnstuff3 ;2 [38]
 202:	2a c0       	rjmp	.+84     	; 0x258 <didUnstuff3>

00000204 <unstuff4>:

unstuff4:               ;1 (branch taken)
    andi    x3, ~0x10   ;1 [40]
 204:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN   ;1 [41] <-- sample stuffed bit 4
 206:	09 b1       	in	r16, 0x09	; 9
    ori     shift, 0x10 ;1 [42]
 208:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4 ;2 [44]
 20a:	2c c0       	rjmp	.+88     	; 0x264 <didUnstuff4>

0000020c <unstuff5>:

unstuff5:               ;1 (branch taken)
    andi    x3, ~0x20   ;1 [48]
 20c:	4f 7d       	andi	r20, 0xDF	; 223
    in      x2, USBIN   ;1 [49] <-- sample stuffed bit 5
 20e:	19 b1       	in	r17, 0x09	; 9
    ori     shift, 0x20 ;1 [50]
 210:	20 62       	ori	r18, 0x20	; 32
    rjmp    didUnstuff5 ;2 [52]
 212:	2f c0       	rjmp	.+94     	; 0x272 <didUnstuff5>

00000214 <unstuff6>:

unstuff6:               ;1 (branch taken)
    andi    x3, ~0x40   ;1 [56]
 214:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN   ;1 [57] <-- sample stuffed bit 6
 216:	09 b1       	in	r16, 0x09	; 9
    ori     shift, 0x40 ;1 [58]
 218:	20 64       	ori	r18, 0x40	; 64
    rjmp    didUnstuff6 ;2 [60]
 21a:	32 c0       	rjmp	.+100    	; 0x280 <didUnstuff6>

0000021c <rxLoop>:
; bit 4:    none
; bit 5:    none
; bit 6:    none
; bit 7:    jump, eor
rxLoop:
    eor     x3, shift   ;1 [0] reconstruct: x3 is 0 at bit locations we changed, 1 at others
 21c:	42 27       	eor	r20, r18
    in      x1, USBIN   ;1 [1] <-- sample bit 0
 21e:	09 b1       	in	r16, 0x09	; 9
    st      y+, x3      ;2 [3] store data
 220:	49 93       	st	Y+, r20
    ser     x3          ;1 [4]
 222:	4f ef       	ldi	r20, 0xFF	; 255
    nop                 ;1 [5]
 224:	00 00       	nop
    eor     x2, x1      ;1 [6]
 226:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [7]
 228:	13 fb       	bst	r17, 3
    bld     shift, 0    ;1 [8]
 22a:	20 f9       	bld	r18, 0
    in      x2, USBIN   ;1 [9] <-- sample bit 1 (or possibly bit 0 stuffed)
 22c:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK ;1 [10]
 22e:	1c 70       	andi	r17, 0x0C	; 12
    breq    se0         ;1 [11] SE0 check for bit 1
 230:	c9 f1       	breq	.+114    	; 0x2a4 <se0>
    andi    shift, 0xf9 ;1 [12]
 232:	29 7f       	andi	r18, 0xF9	; 249

00000234 <didUnstuff0>:
didUnstuff0:
    breq    unstuff0    ;1 [13]
 234:	91 f2       	breq	.-92     	; 0x1da <unstuff0>
    eor     x1, x2      ;1 [14]
 236:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [15]
 238:	03 fb       	bst	r16, 3
    bld     shift, 1    ;1 [16]
 23a:	21 f9       	bld	r18, 1

0000023c <rxbit2>:
rxbit2:
    in      x1, USBIN   ;1 [17] <-- sample bit 2 (or possibly bit 1 stuffed)
 23c:	09 b1       	in	r16, 0x09	; 9
    andi    shift, 0xf3 ;1 [18]
 23e:	23 7f       	andi	r18, 0xF3	; 243
    breq    unstuff1    ;1 [19] do remaining work for bit 1
 240:	89 f2       	breq	.-94     	; 0x1e4 <unstuff1>

00000242 <didUnstuff1>:
didUnstuff1:
    subi    cnt, 1      ;1 [20]
 242:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow    ;1 [21] loop control
 244:	58 f1       	brcs	.+86     	; 0x29c <overflow>
    eor     x2, x1      ;1 [22]
 246:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [23]
 248:	13 fb       	bst	r17, 3
    bld     shift, 2    ;1 [24]
 24a:	22 f9       	bld	r18, 2
    in      x2, USBIN   ;1 [25] <-- sample bit 3 (or possibly bit 2 stuffed)
 24c:	19 b1       	in	r17, 0x09	; 9
    andi    shift, 0xe7 ;1 [26]
 24e:	27 7e       	andi	r18, 0xE7	; 231
    breq    unstuff2    ;1 [27]
 250:	79 f2       	breq	.-98     	; 0x1f0 <unstuff2>

00000252 <didUnstuff2>:
didUnstuff2:
    eor     x1, x2      ;1 [28]
 252:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [29]
 254:	03 fb       	bst	r16, 3
    bld     shift, 3    ;1 [30]
 256:	23 f9       	bld	r18, 3

00000258 <didUnstuff3>:
didUnstuff3:
    andi    shift, 0xcf ;1 [31]
 258:	2f 7c       	andi	r18, 0xCF	; 207
    breq    unstuff3    ;1 [32]
 25a:	81 f2       	breq	.-96     	; 0x1fc <unstuff3>
    in      x1, USBIN   ;1 [33] <-- sample bit 4
 25c:	09 b1       	in	r16, 0x09	; 9
    eor     x2, x1      ;1 [34]
 25e:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [35]
 260:	13 fb       	bst	r17, 3
    bld     shift, 4    ;1 [36]
 262:	24 f9       	bld	r18, 4

00000264 <didUnstuff4>:
didUnstuff4:
    andi    shift, 0x9f ;1 [37]
 264:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4    ;1 [38]
 266:	71 f2       	breq	.-100    	; 0x204 <unstuff4>
    nop2                ;2 [40]
 268:	00 c0       	rjmp	.+0      	; 0x26a <didUnstuff4+0x6>
    in      x2, USBIN   ;1 [41] <-- sample bit 5
 26a:	19 b1       	in	r17, 0x09	; 9
    eor     x1, x2      ;1 [42]
 26c:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [43]
 26e:	03 fb       	bst	r16, 3
    bld     shift, 5    ;1 [44]
 270:	25 f9       	bld	r18, 5

00000272 <didUnstuff5>:
didUnstuff5:
    andi    shift, 0x3f ;1 [45]
 272:	2f 73       	andi	r18, 0x3F	; 63
    breq    unstuff5    ;1 [46]
 274:	59 f2       	breq	.-106    	; 0x20c <unstuff5>
    nop2                ;2 [48]
 276:	00 c0       	rjmp	.+0      	; 0x278 <didUnstuff5+0x6>
    in      x1, USBIN   ;1 [49] <-- sample bit 6
 278:	09 b1       	in	r16, 0x09	; 9
    eor     x2, x1      ;1 [50]
 27a:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [51]
 27c:	13 fb       	bst	r17, 3
    bld     shift, 6    ;1 [52]
 27e:	26 f9       	bld	r18, 6

00000280 <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0x02 ;1 [53]
 280:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6    ;1 [54]
 282:	40 f2       	brcs	.-112    	; 0x214 <unstuff6>
    nop2                ;2 [56]
 284:	00 c0       	rjmp	.+0      	; 0x286 <didUnstuff6+0x6>
    in      x2, USBIN   ;1 [57] <-- sample bit 7
 286:	19 b1       	in	r17, 0x09	; 9
    eor     x1, x2      ;1 [58]
 288:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [59]
 28a:	03 fb       	bst	r16, 3
    bld     shift, 7    ;1 [60]
 28c:	27 f9       	bld	r18, 7

0000028e <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0x04 ;1 [61]
 28e:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop      ;2 [63] loop control
 290:	28 f6       	brcc	.-118    	; 0x21c <rxLoop>

00000292 <unstuff7>:
unstuff7:
    andi    x3, ~0x80   ;1 [63]
 292:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80 ;1 [64]
 294:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN   ;1 [65] <-- sample stuffed bit 7
 296:	19 b1       	in	r17, 0x09	; 9
    nop                 ;1 [66]
 298:	00 00       	nop
    rjmp    didUnstuff7 ;2 [68]
 29a:	f9 cf       	rjmp	.-14     	; 0x28e <didUnstuff7>

0000029c <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 29c:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 29e:	1c bb       	out	0x1c, r17	; 28

000002a0 <ignorePacket>:
ignorePacket:
    clr     token
 2a0:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 2a2:	19 c0       	rjmp	.+50     	; 0x2d6 <handleSetupOrOut>

000002a4 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 2a4:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 2a6:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 2a8:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 2aa:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 2ac:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 2ae:	1c bb       	out	0x1c, r17	; 28
    ld      token, y            ;[11]
 2b0:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 2b2:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 2b4:	f9 f0       	breq	.+62     	; 0x2f4 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 2b6:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 2b8:	e9 f0       	breq	.+58     	; 0x2f4 <handleData>
    lds     shift, usbDeviceAddr;[17]
 2ba:	20 91 2d 01 	lds	r18, 0x012D
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 2be:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 2c0:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 2c2:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 2c4:	ed cf       	rjmp	.-38     	; 0x2a0 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
 2c6:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
 2c8:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 2ca:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 2cc:	41 f1       	breq	.+80     	; 0x31e <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 2ce:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 2d0:	11 f0       	breq	.+4      	; 0x2d6 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 2d2:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 2d4:	29 f7       	brne	.-54     	; 0x2a0 <ignorePacket>

000002d6 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 2d6:	00 93 34 01 	sts	0x0134, r16

000002da <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 2da:	3f 91       	pop	r19
 2dc:	4f 91       	pop	r20
 2de:	1f 91       	pop	r17
 2e0:	0f 91       	pop	r16
 2e2:	2f 91       	pop	r18
 2e4:	df 91       	pop	r29
    USB_LOAD_PENDING(YL)        ;[49]
 2e6:	cc b3       	in	r28, 0x1c	; 28
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 2e8:	c0 fd       	sbrc	r28, 0
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 2ea:	4f cf       	rjmp	.-354    	; 0x18a <waitForJ>

000002ec <sofError>:
sofError:
    POP_RETI                    ;macro call
 2ec:	cf 91       	pop	r28
 2ee:	cf bf       	out	0x3f, r28	; 63
 2f0:	cf 91       	pop	r28
    reti
 2f2:	18 95       	reti

000002f4 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 2f4:	20 91 34 01 	lds	r18, 0x0134
    tst     shift               ;[20]
 2f8:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 2fa:	79 f3       	breq	.-34     	; 0x2da <doReturn>
    lds     x2, usbRxLen        ;[22]
 2fc:	10 91 32 01 	lds	r17, 0x0132
    tst     x2                  ;[24]
 300:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 302:	69 f5       	brne	.+90     	; 0x35e <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 304:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 306:	6a f1       	brmi	.+90     	; 0x362 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 308:	30 93 32 01 	sts	0x0132, r19
    sts     usbRxToken, shift   ;[30]
 30c:	20 93 2e 01 	sts	0x012E, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
 310:	10 91 2f 01 	lds	r17, 0x012F
    ldi     cnt, USB_BUFSIZE    ;[34]
 314:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 316:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 318:	30 93 2f 01 	sts	0x012F, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 31c:	22 c0       	rjmp	.+68     	; 0x362 <sendAckAndReti>

0000031e <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 31e:	00 91 32 01 	lds	r16, 0x0132
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 322:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 324:	e4 f4       	brge	.+56     	; 0x35e <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 326:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
 328:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
 32a:	49 f4       	brne	.+18     	; 0x33e <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 32c:	30 91 01 01 	lds	r19, 0x0101
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 330:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 332:	19 c0       	rjmp	.+50     	; 0x366 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 334:	00 93 01 01 	sts	0x0101, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
 338:	c6 e1       	ldi	r28, 0x16	; 22
    ldi     YH, hi8(usbTxBuf)   ;[44]
 33a:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 33c:	18 c0       	rjmp	.+48     	; 0x36e <usbSendAndReti>

0000033e <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
 33e:	30 91 21 01 	lds	r19, 0x0121
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 342:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 344:	10 c0       	rjmp	.+32     	; 0x366 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 346:	00 93 21 01 	sts	0x0121, r16
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 34a:	c2 e2       	ldi	r28, 0x22	; 34
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 34c:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 34e:	0f c0       	rjmp	.+30     	; 0x36e <usbSendAndReti>

00000350 <stuffN1Delay>:
;----------------------------------------------------------------------------

txByteLoop:
txBitloop:
stuffN1Delay:                   ;     [03]
    ror     shift               ;[-5] [11] [59]
 350:	27 95       	ror	r18
    brcc    doExorN1            ;[-4]      [60]
 352:	a8 f4       	brcc	.+42     	; 0x37e <doExorN1>
    subi    x4, 1               ;[-3]
 354:	51 50       	subi	r21, 0x01	; 1
    brne    commonN1            ;[-2]
 356:	a9 f4       	brne	.+42     	; 0x382 <commonN1>
    lsl     shift               ;[-1] compensate ror after rjmp stuffDelay
 358:	22 0f       	add	r18, r18
    nop                         ;[00] stuffing consists of just waiting 8 cycles
 35a:	00 00       	nop
    rjmp    stuffN1Delay        ;[01] after ror, C bit is reliably clear
 35c:	f9 cf       	rjmp	.-14     	; 0x350 <stuffN1Delay>

0000035e <sendNakAndReti>:

sendNakAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_NAK      ;1 [-18]
 35e:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    usbSendX3           ;2 [-16]
 360:	03 c0       	rjmp	.+6      	; 0x368 <usbSendX3>

00000362 <sendAckAndReti>:
sendAckAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_ACK      ;1 [-18]
 362:	42 ed       	ldi	r20, 0xD2	; 210
    rjmp    usbSendX3           ;2 [-16]
 364:	01 c0       	rjmp	.+2      	; 0x368 <usbSendX3>

00000366 <sendCntAndReti>:
sendCntAndReti:                 ;0 [-17] 17 cycles until SOP
    mov     x3, cnt             ;1 [-16]
 366:	43 2f       	mov	r20, r19

00000368 <usbSendX3>:
usbSendX3:                      ;0 [-16]
    ldi     YL, 20              ;1 [-15] 'x3' is R20
 368:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0               ;1 [-14]
 36a:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2              ;1 [-13]
 36c:	32 e0       	ldi	r19, 0x02	; 2

0000036e <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte
;uses: x1...x2, x4, shift, cnt, Y [x1 = mirror USBOUT, x2 = USBMASK, x4 = bitstuff cnt]
;Numbers in brackets are time since first bit of sync pattern is sent (start of instruction)
usbSendAndReti:
    in      x2, USBDDR          ;[-12] 12 cycles until SOP
 36e:	1a b1       	in	r17, 0x0a	; 10
    ori     x2, USBMASK         ;[-11]
 370:	1c 60       	ori	r17, 0x0C	; 12
    sbi     USBOUT, USBMINUS    ;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 372:	5b 9a       	sbi	0x0b, 3	; 11
    out     USBDDR, x2          ;[-8] <--- acquire bus
 374:	1a b9       	out	0x0a, r17	; 10
    in      x1, USBOUT          ;[-7] port mirror for tx loop
 376:	0b b1       	in	r16, 0x0b	; 11
    ldi     shift, 0x40         ;[-6] sync byte is first byte sent (we enter loop after ror)
 378:	20 e4       	ldi	r18, 0x40	; 64
    ldi     x2, USBMASK         ;[-5]
 37a:	1c e0       	ldi	r17, 0x0C	; 12
    push    x4                  ;[-4]
 37c:	5f 93       	push	r21

0000037e <doExorN1>:
doExorN1:
    eor     x1, x2              ;[-2] [06] [62]
 37e:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[-1] [07] [63]
 380:	56 e0       	ldi	r21, 0x06	; 6

00000382 <commonN1>:
commonN1:
stuffN2Delay:
    out     USBOUT, x1          ;[00] [08] [64] <--- set bit
 382:	0b b9       	out	0x0b, r16	; 11
    ror     shift               ;[01]
 384:	27 95       	ror	r18
    brcc    doExorN2            ;[02]
 386:	20 f4       	brcc	.+8      	; 0x390 <doExorN2>
    subi    x4, 1               ;[03]
 388:	51 50       	subi	r21, 0x01	; 1
    brne    commonN2            ;[04]
 38a:	21 f4       	brne	.+8      	; 0x394 <commonN2>
    lsl     shift               ;[05] compensate ror after rjmp stuffDelay
 38c:	22 0f       	add	r18, r18
    rjmp    stuffN2Delay        ;[06] after ror, C bit is reliably clear
 38e:	f9 cf       	rjmp	.-14     	; 0x382 <commonN1>

00000390 <doExorN2>:
doExorN2:
    eor     x1, x2              ;[04] [12]
 390:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[05] [13]
 392:	56 e0       	ldi	r21, 0x06	; 6

00000394 <commonN2>:
commonN2:
    nop                         ;[06] [14]
 394:	00 00       	nop
    subi    cnt, 171            ;[07] [15] trick: (3 * 171) & 0xff = 1
 396:	3b 5a       	subi	r19, 0xAB	; 171
    out     USBOUT, x1          ;[08] [16] <--- set bit
 398:	0b b9       	out	0x0b, r16	; 11
    brcs    txBitloop           ;[09]      [25] [41]
 39a:	d0 f2       	brcs	.-76     	; 0x350 <stuffN1Delay>

0000039c <stuff6Delay>:

stuff6Delay:
    ror     shift               ;[42] [50]
 39c:	27 95       	ror	r18
    brcc    doExor6             ;[43]
 39e:	28 f4       	brcc	.+10     	; 0x3aa <doExor6>
    subi    x4, 1               ;[44]
 3a0:	51 50       	subi	r21, 0x01	; 1
    brne    common6             ;[45]
 3a2:	29 f4       	brne	.+10     	; 0x3ae <common6>
    lsl     shift               ;[46] compensate ror after rjmp stuffDelay
 3a4:	22 0f       	add	r18, r18
    nop                         ;[47] stuffing consists of just waiting 8 cycles
 3a6:	00 00       	nop
    rjmp    stuff6Delay         ;[48] after ror, C bit is reliably clear
 3a8:	f9 cf       	rjmp	.-14     	; 0x39c <stuff6Delay>

000003aa <doExor6>:
doExor6:
    eor     x1, x2              ;[45] [53]
 3aa:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[46]
 3ac:	56 e0       	ldi	r21, 0x06	; 6

000003ae <common6>:
common6:
stuff7Delay:
    ror     shift               ;[47] [55]
 3ae:	27 95       	ror	r18
    out     USBOUT, x1          ;[48] <--- set bit
 3b0:	0b b9       	out	0x0b, r16	; 11
    brcc    doExor7             ;[49]
 3b2:	20 f4       	brcc	.+8      	; 0x3bc <doExor7>
    subi    x4, 1               ;[50]
 3b4:	51 50       	subi	r21, 0x01	; 1
    brne    common7             ;[51]
 3b6:	21 f4       	brne	.+8      	; 0x3c0 <common7>
    lsl     shift               ;[52] compensate ror after rjmp stuffDelay
 3b8:	22 0f       	add	r18, r18
    rjmp    stuff7Delay         ;[53] after ror, C bit is reliably clear
 3ba:	f9 cf       	rjmp	.-14     	; 0x3ae <common6>

000003bc <doExor7>:
doExor7:
    eor     x1, x2              ;[51] [59]
 3bc:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[52]
 3be:	56 e0       	ldi	r21, 0x06	; 6

000003c0 <common7>:
common7:
    ld      shift, y+           ;[53]
 3c0:	29 91       	ld	r18, Y+
    tst     cnt                 ;[55]
 3c2:	33 23       	and	r19, r19
    out     USBOUT, x1          ;[56] <--- set bit
 3c4:	0b b9       	out	0x0b, r16	; 11
    brne    txByteLoop          ;[57]
 3c6:	21 f6       	brne	.-120    	; 0x350 <stuffN1Delay>

;make SE0:
    cbr     x1, USBMASK         ;[58] prepare SE0 [spec says EOP may be 15 to 18 cycles]
 3c8:	03 7f       	andi	r16, 0xF3	; 243
    lds     x2, usbNewDeviceAddr;[59]
 3ca:	10 91 33 01 	lds	r17, 0x0133
    lsl     x2                  ;[61] we compare with left shifted address
 3ce:	11 0f       	add	r17, r17
    subi    YL, 2 + 20          ;[62] Only assign address on data packets, not ACK/NAK in x3
 3d0:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0               ;[63]
 3d2:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1          ;[00] <-- out SE0 -- from now 2 bits = 16 cycles until bus idle
 3d4:	0b b9       	out	0x0b, r16	; 11
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign      ;[01]
 3d6:	11 f0       	breq	.+4      	; 0x3dc <skipAddrAssign>
    sts     usbDeviceAddr, x2   ; if not skipped: SE0 is one cycle longer
 3d8:	10 93 2d 01 	sts	0x012D, r17

000003dc <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[03] int0 occurred during TX -- clear pending flag
 3dc:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ;[04]
 3de:	1c bb       	out	0x1c, r17	; 28
    ori     x1, USBIDLE         ;[05]
 3e0:	08 60       	ori	r16, 0x08	; 8
    in      x2, USBDDR          ;[06]
 3e2:	1a b1       	in	r17, 0x0a	; 10
    cbr     x2, USBMASK         ;[07] set both pins to input
 3e4:	13 7f       	andi	r17, 0xF3	; 243
    mov     x3, x1              ;[08]
 3e6:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK         ;[09] configure no pullup on both pins
 3e8:	43 7f       	andi	r20, 0xF3	; 243
    pop     x4                  ;[10]
 3ea:	5f 91       	pop	r21
    nop2                        ;[12]
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <skipAddrAssign+0x12>
    nop2                        ;[14]
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <skipAddrAssign+0x14>
    out     USBOUT, x1          ;[16] <-- out J (idle) -- end of SE0 (EOP signal)
 3f0:	0b b9       	out	0x0b, r16	; 11
    out     USBDDR, x2          ;[17] <-- release bus now
 3f2:	1a b9       	out	0x0a, r17	; 10
    out     USBOUT, x3          ;[18] <-- ensure no pull-up resistors are active
 3f4:	4b b9       	out	0x0b, r20	; 11
    rjmp    doReturn
 3f6:	71 cf       	rjmp	.-286    	; 0x2da <doReturn>

000003f8 <usbFunctionSetup>:

static gamepad_report_t gamepad_report_1_old;


usbMsgLen_t usbFunctionSetup(uint8_t data[8])
{
 3f8:	fc 01       	movw	r30, r24
	// see HID1_11.pdf sect 7.2 and http://vusb.wikidot.com/driver-api
	usbRequest_t *rq = (void *)data;

	if ((rq->bmRequestType & USBRQ_TYPE_MASK) != USBRQ_TYPE_CLASS)
 3fa:	80 81       	ld	r24, Z
 3fc:	80 76       	andi	r24, 0x60	; 96
 3fe:	80 32       	cpi	r24, 0x20	; 32
 400:	61 f5       	brne	.+88     	; 0x45a <usbFunctionSetup+0x62>
		return 0; // ignore request if it's not a class specific request

	// see HID1_11.pdf sect 7.2
	switch (rq->bRequest)
 402:	81 81       	ldd	r24, Z+1	; 0x01
 404:	83 30       	cpi	r24, 0x03	; 3
 406:	91 f0       	breq	.+36     	; 0x42c <usbFunctionSetup+0x34>
 408:	28 f4       	brcc	.+10     	; 0x414 <usbFunctionSetup+0x1c>
 40a:	81 30       	cpi	r24, 0x01	; 1
 40c:	d9 f0       	breq	.+54     	; 0x444 <usbFunctionSetup+0x4c>
 40e:	82 30       	cpi	r24, 0x02	; 2
 410:	21 f5       	brne	.+72     	; 0x45a <usbFunctionSetup+0x62>
 412:	05 c0       	rjmp	.+10     	; 0x41e <usbFunctionSetup+0x26>
 414:	8a 30       	cpi	r24, 0x0A	; 10
 416:	31 f0       	breq	.+12     	; 0x424 <usbFunctionSetup+0x2c>
 418:	8b 30       	cpi	r24, 0x0B	; 11
 41a:	f9 f4       	brne	.+62     	; 0x45a <usbFunctionSetup+0x62>
 41c:	0f c0       	rjmp	.+30     	; 0x43c <usbFunctionSetup+0x44>
	{
		case USBRQ_HID_GET_IDLE:
			usbMsgPtr = &idle_rate; // send data starting from this byte
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	06 c0       	rjmp	.+12     	; 0x430 <usbFunctionSetup+0x38>
			return 1; // send 1 byte
		case USBRQ_HID_SET_IDLE:
			idle_rate = rq->wValue.bytes[1]; // read in idle rate
 424:	83 81       	ldd	r24, Z+3	; 0x03
 426:	80 93 00 01 	sts	0x0100, r24
 42a:	17 c0       	rjmp	.+46     	; 0x45a <usbFunctionSetup+0x62>
			return 0; // send nothing
		case USBRQ_HID_GET_PROTOCOL:
			usbMsgPtr = &protocol_version; // send data starting from this byte
 42c:	84 e0       	ldi	r24, 0x04	; 4
 42e:	91 e0       	ldi	r25, 0x01	; 1
 430:	90 93 31 01 	sts	0x0131, r25
 434:	80 93 30 01 	sts	0x0130, r24
			return 1; // send 1 byte
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	08 95       	ret
		case USBRQ_HID_SET_PROTOCOL:
			protocol_version = rq->wValue.bytes[1];
 43c:	83 81       	ldd	r24, Z+3	; 0x03
 43e:	80 93 04 01 	sts	0x0104, r24
 442:	0b c0       	rjmp	.+22     	; 0x45a <usbFunctionSetup+0x62>
			return 0; // send nothing
		case USBRQ_HID_GET_REPORT:
			// check for report ID then send back report
			if (rq->wValue.bytes[0] == 1)
 444:	82 81       	ldd	r24, Z+2	; 0x02
 446:	81 30       	cpi	r24, 0x01	; 1
 448:	41 f4       	brne	.+16     	; 0x45a <usbFunctionSetup+0x62>
			{
				usbMsgPtr = &gamepad_report_1;
 44a:	85 e0       	ldi	r24, 0x05	; 5
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	90 93 31 01 	sts	0x0131, r25
 452:	80 93 30 01 	sts	0x0130, r24
				return sizeof(gamepad_report_1);
 456:	88 e0       	ldi	r24, 0x08	; 8
 458:	08 95       	ret
{
	// see HID1_11.pdf sect 7.2 and http://vusb.wikidot.com/driver-api
	usbRequest_t *rq = (void *)data;

	if ((rq->bmRequestType & USBRQ_TYPE_MASK) != USBRQ_TYPE_CLASS)
		return 0; // ignore request if it's not a class specific request
 45a:	80 e0       	ldi	r24, 0x00	; 0
		case USBRQ_HID_SET_REPORT: // no "output" or "feature" implemented, so ignore
			return 0; // send nothing
		default: // do not understand data, ignore
			return 0; // send nothing
	}
}
 45c:	08 95       	ret

0000045e <usbSendHidReport>:

// this function is used to guarantee that the data is sent to the computer once
void usbSendHidReport(uchar * data, uchar len)
{
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	00 d0       	rcall	.+0      	; 0x464 <usbSendHidReport+0x6>
 464:	1f 92       	push	r1
 466:	cd b7       	in	r28, 0x3d	; 61
 468:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		usbPoll();
 46a:	6b 83       	std	Y+3, r22	; 0x03
 46c:	89 83       	std	Y+1, r24	; 0x01
 46e:	9a 83       	std	Y+2, r25	; 0x02
 470:	0e 94 b8 03 	call	0x770	; 0x770 <usbPoll>
		if (usbInterruptIsReady())
 474:	20 91 21 01 	lds	r18, 0x0121
 478:	6b 81       	ldd	r22, Y+3	; 0x03
 47a:	89 81       	ldd	r24, Y+1	; 0x01
 47c:	9a 81       	ldd	r25, Y+2	; 0x02
 47e:	24 ff       	sbrs	r18, 4
 480:	f4 cf       	rjmp	.-24     	; 0x46a <usbSendHidReport+0xc>
		{
			usbSetInterrupt(data, len);
			break;
		}
	}
}
 482:	0f 90       	pop	r0
 484:	0f 90       	pop	r0
 486:	0f 90       	pop	r0
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
	while(1)
	{
		usbPoll();
		if (usbInterruptIsReady())
		{
			usbSetInterrupt(data, len);
 48c:	0c 94 95 03 	jmp	0x72a	; 0x72a <usbSetInterrupt>

00000490 <main>:
}

int main()
{
 
	wdt_disable(); // no watchdog, just because I'm lazy
 490:	88 e1       	ldi	r24, 0x18	; 24
 492:	0f b6       	in	r0, 0x3f	; 63
 494:	f8 94       	cli
 496:	80 93 60 00 	sts	0x0060, r24
 49a:	10 92 60 00 	sts	0x0060, r1
 49e:	0f be       	out	0x3f, r0	; 63
    
	// Configure I/O PORTS - All Digital Inputs (ARCADE)
	DDRB = 0;
 4a0:	14 b8       	out	0x04, r1	; 4
	DDRC = 0;
 4a2:	17 b8       	out	0x07, r1	; 7
	DDRD = 0;
 4a4:	1a b8       	out	0x0a, r1	; 10
	// Configure Pullups except for Pins PD2 and PD3
	PORTB = 0xff;
 4a6:	8f ef       	ldi	r24, 0xFF	; 255
 4a8:	85 b9       	out	0x05, r24	; 5
	PORTC = 0xff;
 4aa:	88 b9       	out	0x08, r24	; 8
	PORTD = 0xf3;      // 1 1 1 1 0 0 1 1
 4ac:	83 ef       	ldi	r24, 0xF3	; 243
 4ae:	8b b9       	out	0x0b, r24	; 11
	
	// Configure ADC	
    ADMUX = (1<<REFS0 | 1<<ADLAR );  // AREF = AVcc, Left Justified
 4b0:	80 e6       	ldi	r24, 0x60	; 96
 4b2:	80 93 7c 00 	sts	0x007C, r24

    // 12000000/128 = 93750Hz  
    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);  // ADC Enable and prescaler of 128
 4b6:	87 e8       	ldi	r24, 0x87	; 135
 4b8:	80 93 7a 00 	sts	0x007A, r24
	
	 
	// Configure timer 	
	TCCR1B = _BV(CS12) | _BV(CS11); // timer is initialized, used to keep track of idle period
 4bc:	86 e0       	ldi	r24, 0x06	; 6
 4be:	80 93 81 00 	sts	0x0081, r24
	
	// Start the show!
	usbInit(); // start v-usb
 4c2:	0e 94 bb 04 	call	0x976	; 0x976 <usbInit>
    usbDeviceDisconnect(); // enforce USB re-enumeration, do this while interrupts are disabled!
 4c6:	53 9a       	sbi	0x0a, 3	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c8:	2f eb       	ldi	r18, 0xBF	; 191
 4ca:	87 e2       	ldi	r24, 0x27	; 39
 4cc:	99 e0       	ldi	r25, 0x09	; 9
 4ce:	21 50       	subi	r18, 0x01	; 1
 4d0:	80 40       	sbci	r24, 0x00	; 0
 4d2:	90 40       	sbci	r25, 0x00	; 0
 4d4:	e1 f7       	brne	.-8      	; 0x4ce <main+0x3e>
 4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <main+0x48>
 4d8:	00 00       	nop
	_delay_ms(250);
    usbDeviceConnect();
 4da:	53 98       	cbi	0x0a, 3	; 10
	
    sei(); // enable interrupts
 4dc:	78 94       	sei
	
	uint8_t to_send = 1; // boolean, true for first time
 4de:	d1 e0       	ldi	r29, 0x01	; 1
		
		// Populate Analog Axes 
        ADMUX = (ADMUX & 0xF8) | Xaxis; // Select X axis 
		ADCSRA |= (1<<ADSC); // start single convertion
		while(ADCSRA & (1<<ADSC)); // wait for conversion to complete		
		gamepad_report_1.vXaxis = 127-ADCH;
 4e0:	cf e7       	ldi	r28, 0x7F	; 127
	
	uint8_t to_send = 1; // boolean, true for first time
	
	while (1)
	{
		usbPoll();
 4e2:	0e 94 b8 03 	call	0x770	; 0x770 <usbPoll>
		
		// Initialize the report IDs 
//		gamepad_report_1.report_id = 1;  // no ID is sent. All data shall be within 8 bytes
		
		// Initialize report. No buttons pressed, directional at center
		gamepad_report_1.buttons8_1=0;
 4e6:	10 92 05 01 	sts	0x0105, r1
		gamepad_report_1.buttons12_9=0;		
 4ea:	10 92 06 01 	sts	0x0106, r1
		gamepad_report_1.vXaxis=0;
 4ee:	10 92 07 01 	sts	0x0107, r1
		gamepad_report_1.vYaxis=0;		
 4f2:	10 92 08 01 	sts	0x0108, r1
		gamepad_report_1.vZaxis=0;
 4f6:	10 92 09 01 	sts	0x0109, r1
		gamepad_report_1.vRXaxis=0;
 4fa:	10 92 0a 01 	sts	0x010A, r1
		gamepad_report_1.vRYaxis=0;		
 4fe:	10 92 0b 01 	sts	0x010B, r1
		gamepad_report_1.vRZaxis=0;		
 502:	10 92 0c 01 	sts	0x010C, r1
 		
		
		// Populate Analog Axes 
        ADMUX = (ADMUX & 0xF8) | Xaxis; // Select X axis 
 506:	80 91 7c 00 	lds	r24, 0x007C
 50a:	88 7f       	andi	r24, 0xF8	; 248
 50c:	82 60       	ori	r24, 0x02	; 2
 50e:	80 93 7c 00 	sts	0x007C, r24
		ADCSRA |= (1<<ADSC); // start single convertion
 512:	80 91 7a 00 	lds	r24, 0x007A
 516:	80 64       	ori	r24, 0x40	; 64
 518:	80 93 7a 00 	sts	0x007A, r24
		while(ADCSRA & (1<<ADSC)); // wait for conversion to complete		
 51c:	80 91 7a 00 	lds	r24, 0x007A
 520:	86 fd       	sbrc	r24, 6
 522:	fc cf       	rjmp	.-8      	; 0x51c <main+0x8c>
		gamepad_report_1.vXaxis = 127-ADCH;
 524:	80 91 79 00 	lds	r24, 0x0079
 528:	2c 2f       	mov	r18, r28
 52a:	28 1b       	sub	r18, r24
 52c:	20 93 07 01 	sts	0x0107, r18
	
        ADMUX = (ADMUX & 0xF8) | Yaxis; // Select Y axis 
 530:	80 91 7c 00 	lds	r24, 0x007C
 534:	88 7f       	andi	r24, 0xF8	; 248
 536:	83 60       	ori	r24, 0x03	; 3
 538:	80 93 7c 00 	sts	0x007C, r24
		ADCSRA |= (1<<ADSC); // start single convertion
 53c:	80 91 7a 00 	lds	r24, 0x007A
 540:	80 64       	ori	r24, 0x40	; 64
 542:	80 93 7a 00 	sts	0x007A, r24
		while(ADCSRA & (1<<ADSC)); // wait for conversion to complete		
 546:	80 91 7a 00 	lds	r24, 0x007A
 54a:	86 fd       	sbrc	r24, 6
 54c:	fc cf       	rjmp	.-8      	; 0x546 <main+0xb6>
		gamepad_report_1.vYaxis = 127-ADCH;		
 54e:	80 91 79 00 	lds	r24, 0x0079
 552:	9c 2f       	mov	r25, r28
 554:	98 1b       	sub	r25, r24
 556:	90 93 08 01 	sts	0x0108, r25

        ADMUX = (ADMUX & 0xF8) | Zaxis; // Select Z axis 
 55a:	80 91 7c 00 	lds	r24, 0x007C
 55e:	88 7f       	andi	r24, 0xF8	; 248
 560:	84 60       	ori	r24, 0x04	; 4
 562:	80 93 7c 00 	sts	0x007C, r24
		ADCSRA |= (1<<ADSC); // start single convertion
 566:	80 91 7a 00 	lds	r24, 0x007A
 56a:	80 64       	ori	r24, 0x40	; 64
 56c:	80 93 7a 00 	sts	0x007A, r24
		while(ADCSRA & (1<<ADSC)); // wait for conversion to complete		
 570:	80 91 7a 00 	lds	r24, 0x007A
 574:	86 fd       	sbrc	r24, 6
 576:	fc cf       	rjmp	.-8      	; 0x570 <main+0xe0>
		gamepad_report_1.vZaxis = 127-ADCH;
 578:	80 91 79 00 	lds	r24, 0x0079
 57c:	2c 2f       	mov	r18, r28
 57e:	28 1b       	sub	r18, r24
 580:	20 93 09 01 	sts	0x0109, r18
		
        ADMUX = (ADMUX & 0xF8) | RXaxis; // Select RX axis 
 584:	80 91 7c 00 	lds	r24, 0x007C
 588:	88 7f       	andi	r24, 0xF8	; 248
 58a:	85 60       	ori	r24, 0x05	; 5
 58c:	80 93 7c 00 	sts	0x007C, r24
		ADCSRA |= (1<<ADSC); // start single convertion
 590:	80 91 7a 00 	lds	r24, 0x007A
 594:	80 64       	ori	r24, 0x40	; 64
 596:	80 93 7a 00 	sts	0x007A, r24
		while(ADCSRA & (1<<ADSC)); // wait for conversion to complete		
 59a:	80 91 7a 00 	lds	r24, 0x007A
 59e:	86 fd       	sbrc	r24, 6
 5a0:	fc cf       	rjmp	.-8      	; 0x59a <main+0x10a>
		gamepad_report_1.vRXaxis = 127-ADCH;
 5a2:	80 91 79 00 	lds	r24, 0x0079
 5a6:	9c 2f       	mov	r25, r28
 5a8:	98 1b       	sub	r25, r24
 5aa:	90 93 0a 01 	sts	0x010A, r25
		
        ADMUX = (ADMUX & 0xF8) | RYaxis; // Select RY axis 
 5ae:	80 91 7c 00 	lds	r24, 0x007C
 5b2:	88 7f       	andi	r24, 0xF8	; 248
 5b4:	81 60       	ori	r24, 0x01	; 1
 5b6:	80 93 7c 00 	sts	0x007C, r24
		ADCSRA |= (1<<ADSC); // start single convertion
 5ba:	80 91 7a 00 	lds	r24, 0x007A
 5be:	80 64       	ori	r24, 0x40	; 64
 5c0:	80 93 7a 00 	sts	0x007A, r24
		while(ADCSRA & (1<<ADSC)); // wait for conversion to complete		
 5c4:	80 91 7a 00 	lds	r24, 0x007A
 5c8:	86 fd       	sbrc	r24, 6
 5ca:	fc cf       	rjmp	.-8      	; 0x5c4 <main+0x134>
		gamepad_report_1.vRYaxis = 127-ADCH;		
 5cc:	80 91 79 00 	lds	r24, 0x0079
 5d0:	2c 2f       	mov	r18, r28
 5d2:	28 1b       	sub	r18, r24
 5d4:	20 93 0b 01 	sts	0x010B, r18

        ADMUX = (ADMUX & 0xF8) | RZaxis; // Select RZ axis 
 5d8:	80 91 7c 00 	lds	r24, 0x007C
 5dc:	88 7f       	andi	r24, 0xF8	; 248
 5de:	80 93 7c 00 	sts	0x007C, r24
		ADCSRA |= (1<<ADSC); // start single convertion
 5e2:	80 91 7a 00 	lds	r24, 0x007A
 5e6:	80 64       	ori	r24, 0x40	; 64
 5e8:	80 93 7a 00 	sts	0x007A, r24
		while(ADCSRA & (1<<ADSC)); // wait for conversion to complete		
 5ec:	80 91 7a 00 	lds	r24, 0x007A
 5f0:	86 fd       	sbrc	r24, 6
 5f2:	fc cf       	rjmp	.-8      	; 0x5ec <main+0x15c>
		gamepad_report_1.vRZaxis = 127-ADCH;
 5f4:	80 91 79 00 	lds	r24, 0x0079
 5f8:	9c 2f       	mov	r25, r28
 5fa:	98 1b       	sub	r25, r24
 5fc:	90 93 0c 01 	sts	0x010C, r25


		// Populate buttons 1-7
		if ( B3 ) gamepad_report_1.buttons8_1	+= 1;	
 600:	1d 99       	sbic	0x03, 5	; 3
 602:	05 c0       	rjmp	.+10     	; 0x60e <main+0x17e>
 604:	80 91 05 01 	lds	r24, 0x0105
 608:	8f 5f       	subi	r24, 0xFF	; 255
 60a:	80 93 05 01 	sts	0x0105, r24
		if ( B4 ) gamepad_report_1.buttons8_1	+= 2;		
 60e:	1c 99       	sbic	0x03, 4	; 3
 610:	05 c0       	rjmp	.+10     	; 0x61c <main+0x18c>
 612:	80 91 05 01 	lds	r24, 0x0105
 616:	8e 5f       	subi	r24, 0xFE	; 254
 618:	80 93 05 01 	sts	0x0105, r24
		if ( B5 ) gamepad_report_1.buttons8_1	+= 4;	
 61c:	1b 99       	sbic	0x03, 3	; 3
 61e:	05 c0       	rjmp	.+10     	; 0x62a <main+0x19a>
 620:	80 91 05 01 	lds	r24, 0x0105
 624:	8c 5f       	subi	r24, 0xFC	; 252
 626:	80 93 05 01 	sts	0x0105, r24
		if ( B6 ) gamepad_report_1.buttons8_1	+= 8;		
 62a:	1a 99       	sbic	0x03, 2	; 3
 62c:	05 c0       	rjmp	.+10     	; 0x638 <main+0x1a8>
 62e:	80 91 05 01 	lds	r24, 0x0105
 632:	88 5f       	subi	r24, 0xF8	; 248
 634:	80 93 05 01 	sts	0x0105, r24
		if ( B7 ) gamepad_report_1.buttons8_1	+= 16;	
 638:	19 99       	sbic	0x03, 1	; 3
 63a:	05 c0       	rjmp	.+10     	; 0x646 <main+0x1b6>
 63c:	80 91 05 01 	lds	r24, 0x0105
 640:	80 5f       	subi	r24, 0xF0	; 240
 642:	80 93 05 01 	sts	0x0105, r24
		if ( B8 ) gamepad_report_1.buttons8_1	+= 32;	
 646:	18 99       	sbic	0x03, 0	; 3
 648:	05 c0       	rjmp	.+10     	; 0x654 <main+0x1c4>
 64a:	80 91 05 01 	lds	r24, 0x0105
 64e:	80 5e       	subi	r24, 0xE0	; 224
 650:	80 93 05 01 	sts	0x0105, r24
		if ( B9 ) gamepad_report_1.buttons8_1	+= 64;	
 654:	4f 99       	sbic	0x09, 7	; 9
 656:	05 c0       	rjmp	.+10     	; 0x662 <main+0x1d2>
 658:	80 91 05 01 	lds	r24, 0x0105
 65c:	80 5c       	subi	r24, 0xC0	; 192
 65e:	80 93 05 01 	sts	0x0105, r24
		if ( A9 ) gamepad_report_1.buttons8_1	+= 128;
 662:	4e 99       	sbic	0x09, 6	; 9
 664:	05 c0       	rjmp	.+10     	; 0x670 <main+0x1e0>
 666:	80 91 05 01 	lds	r24, 0x0105
 66a:	80 58       	subi	r24, 0x80	; 128
 66c:	80 93 05 01 	sts	0x0105, r24

		// Populate buttons 12-9
		if ( A8 ) gamepad_report_1.buttons12_9	+= 1;	
 670:	4d 99       	sbic	0x09, 5	; 9
 672:	05 c0       	rjmp	.+10     	; 0x67e <main+0x1ee>
 674:	80 91 06 01 	lds	r24, 0x0106
 678:	8f 5f       	subi	r24, 0xFF	; 255
 67a:	80 93 06 01 	sts	0x0106, r24
		if ( A7 ) gamepad_report_1.buttons12_9	+= 2;		
 67e:	4c 99       	sbic	0x09, 4	; 9
 680:	05 c0       	rjmp	.+10     	; 0x68c <main+0x1fc>
 682:	80 91 06 01 	lds	r24, 0x0106
 686:	8e 5f       	subi	r24, 0xFE	; 254
 688:	80 93 06 01 	sts	0x0106, r24
		if ( A6 ) gamepad_report_1.buttons12_9	+= 4;	
 68c:	49 99       	sbic	0x09, 1	; 9
 68e:	05 c0       	rjmp	.+10     	; 0x69a <main+0x20a>
 690:	80 91 06 01 	lds	r24, 0x0106
 694:	8c 5f       	subi	r24, 0xFC	; 252
 696:	80 93 06 01 	sts	0x0106, r24
		if ( A5 ) gamepad_report_1.buttons12_9	+= 8;
 69a:	48 99       	sbic	0x09, 0	; 9
 69c:	05 c0       	rjmp	.+10     	; 0x6a8 <main+0x218>
 69e:	80 91 06 01 	lds	r24, 0x0106
 6a2:	88 5f       	subi	r24, 0xF8	; 248
 6a4:	80 93 06 01 	sts	0x0106, r24

		
		
		// determine whether or not the report should be sent
		if ((TCNT1 > ((4 * (F_CPU / 1024000)) * idle_rate) || TCNT1 > 0x7FFF) && idle_rate != 0)
 6a8:	c0 90 84 00 	lds	r12, 0x0084
 6ac:	d0 90 85 00 	lds	r13, 0x0085
 6b0:	40 91 00 01 	lds	r20, 0x0100
 6b4:	e1 2c       	mov	r14, r1
 6b6:	f1 2c       	mov	r15, r1
 6b8:	24 2f       	mov	r18, r20
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	ac e2       	ldi	r26, 0x2C	; 44
 6be:	b0 e0       	ldi	r27, 0x00	; 0
 6c0:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__umulhisi3>
 6c4:	6c 15       	cp	r22, r12
 6c6:	7d 05       	cpc	r23, r13
 6c8:	8e 05       	cpc	r24, r14
 6ca:	9f 05       	cpc	r25, r15
 6cc:	30 f0       	brcs	.+12     	; 0x6da <main+0x24a>
 6ce:	80 91 84 00 	lds	r24, 0x0084
 6d2:	90 91 85 00 	lds	r25, 0x0085
 6d6:	97 ff       	sbrs	r25, 7
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <main+0x24e>
 6da:	41 11       	cpse	r20, r1
 6dc:	0b c0       	rjmp	.+22     	; 0x6f4 <main+0x264>
			to_send = 1;
		}
		else
		{// or if data has changed

			if (memcmp(&gamepad_report_1, &gamepad_report_1_old, sizeof(gamepad_report_t)) != 0)
 6de:	48 e0       	ldi	r20, 0x08	; 8
 6e0:	50 e0       	ldi	r21, 0x00	; 0
 6e2:	6d e0       	ldi	r22, 0x0D	; 13
 6e4:	71 e0       	ldi	r23, 0x01	; 1
 6e6:	85 e0       	ldi	r24, 0x05	; 5
 6e8:	91 e0       	ldi	r25, 0x01	; 1
 6ea:	0e 94 cb 04 	call	0x996	; 0x996 <memcmp>
 6ee:	00 97       	sbiw	r24, 0x00	; 0
 6f0:	09 f4       	brne	.+2      	; 0x6f4 <main+0x264>
 6f2:	01 c0       	rjmp	.+2      	; 0x6f6 <main+0x266>
			{
				to_send = 1;
 6f4:	d1 e0       	ldi	r29, 0x01	; 1
			}

		}
		
		usbPoll();
 6f6:	0e 94 b8 03 	call	0x770	; 0x770 <usbPoll>
		if (to_send != 0)
 6fa:	dd 23       	and	r29, r29
 6fc:	49 f0       	breq	.+18     	; 0x710 <main+0x280>
		{
			// send the data if needed
			usbSendHidReport(&gamepad_report_1, sizeof(gamepad_report_t));
 6fe:	68 e0       	ldi	r22, 0x08	; 8
 700:	85 e0       	ldi	r24, 0x05	; 5
 702:	91 e0       	ldi	r25, 0x01	; 1
 704:	0e 94 2f 02 	call	0x45e	; 0x45e <usbSendHidReport>
			TCNT1 = 0; // reset timer
 708:	10 92 85 00 	sts	0x0085, r1
 70c:	10 92 84 00 	sts	0x0084, r1
		}
		
		usbPoll();
 710:	0e 94 b8 03 	call	0x770	; 0x770 <usbPoll>
		
		memcpy(&gamepad_report_1_old, &gamepad_report_1, sizeof(gamepad_report_t));
 714:	88 e0       	ldi	r24, 0x08	; 8
 716:	e5 e0       	ldi	r30, 0x05	; 5
 718:	f1 e0       	ldi	r31, 0x01	; 1
 71a:	ad e0       	ldi	r26, 0x0D	; 13
 71c:	b1 e0       	ldi	r27, 0x01	; 1
 71e:	01 90       	ld	r0, Z+
 720:	0d 92       	st	X+, r0
 722:	8a 95       	dec	r24
 724:	e1 f7       	brne	.-8      	; 0x71e <main+0x28e>

	
		to_send = 0; // reset flag
 726:	d0 e0       	ldi	r29, 0x00	; 0
	}
 728:	dc ce       	rjmp	.-584    	; 0x4e2 <main+0x52>

0000072a <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 72a:	cf 93       	push	r28
 72c:	c6 2f       	mov	r28, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 72e:	20 91 21 01 	lds	r18, 0x0121
 732:	24 ff       	sbrs	r18, 4
 734:	07 c0       	rjmp	.+14     	; 0x744 <usbSetInterrupt+0x1a>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 736:	20 91 22 01 	lds	r18, 0x0122
 73a:	38 e8       	ldi	r19, 0x88	; 136
 73c:	23 27       	eor	r18, r19
 73e:	20 93 22 01 	sts	0x0122, r18
 742:	03 c0       	rjmp	.+6      	; 0x74a <usbSetInterrupt+0x20>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 744:	2a e5       	ldi	r18, 0x5A	; 90
 746:	20 93 21 01 	sts	0x0121, r18
 74a:	dc 01       	movw	r26, r24
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 74c:	e3 e2       	ldi	r30, 0x23	; 35
 74e:	f1 e0       	ldi	r31, 0x01	; 1
    usbCrc16Append(&txStatus->buffer[1], len);
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
 750:	8c 2f       	mov	r24, r28
 752:	8e 0f       	add	r24, r30
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 754:	9d 91       	ld	r25, X+
 756:	91 93       	st	Z+, r25
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 758:	8e 13       	cpse	r24, r30
 75a:	fc cf       	rjmp	.-8      	; 0x754 <usbSetInterrupt+0x2a>
    usbCrc16Append(&txStatus->buffer[1], len);
 75c:	6c 2f       	mov	r22, r28
 75e:	83 e2       	ldi	r24, 0x23	; 35
 760:	91 e0       	ldi	r25, 0x01	; 1
 762:	0e 94 be 00 	call	0x17c	; 0x17c <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 766:	cc 5f       	subi	r28, 0xFC	; 252
 768:	c0 93 21 01 	sts	0x0121, r28
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 76c:	cf 91       	pop	r28
 76e:	08 95       	ret

00000770 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 770:	cf 93       	push	r28
 772:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 774:	80 91 32 01 	lds	r24, 0x0132
 778:	83 50       	subi	r24, 0x03	; 3
    if(len >= 0){
 77a:	87 fd       	sbrc	r24, 7
 77c:	a4 c0       	rjmp	.+328    	; 0x8c6 <usbPoll+0x156>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 77e:	90 91 2f 01 	lds	r25, 0x012F
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 782:	20 91 2e 01 	lds	r18, 0x012E
 786:	2d 32       	cpi	r18, 0x2D	; 45
 788:	09 f0       	breq	.+2      	; 0x78c <usbPoll+0x1c>
 78a:	9b c0       	rjmp	.+310    	; 0x8c2 <usbPoll+0x152>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 78c:	88 30       	cpi	r24, 0x08	; 8
 78e:	09 f0       	breq	.+2      	; 0x792 <usbPoll+0x22>
 790:	98 c0       	rjmp	.+304    	; 0x8c2 <usbPoll+0x152>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 792:	cc e0       	ldi	r28, 0x0C	; 12
 794:	d0 e0       	ldi	r29, 0x00	; 0
 796:	c9 1b       	sub	r28, r25
 798:	d1 09       	sbc	r29, r1
 79a:	ca 5c       	subi	r28, 0xCA	; 202
 79c:	de 4f       	sbci	r29, 0xFE	; 254
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 79e:	83 ec       	ldi	r24, 0xC3	; 195
 7a0:	80 93 16 01 	sts	0x0116, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 7a4:	8a e5       	ldi	r24, 0x5A	; 90
 7a6:	80 93 01 01 	sts	0x0101, r24
        usbMsgFlags = 0;
 7aa:	10 92 15 01 	sts	0x0115, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
 7ae:	88 81       	ld	r24, Y
 7b0:	80 76       	andi	r24, 0x60	; 96
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 7b2:	21 f0       	breq	.+8      	; 0x7bc <usbPoll+0x4c>
            replyLen = usbFunctionSetup(data);
 7b4:	ce 01       	movw	r24, r28
 7b6:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <usbFunctionSetup>
 7ba:	7a c0       	rjmp	.+244    	; 0x8b0 <usbPoll+0x140>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 7bc:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 7be:	10 92 1f 01 	sts	0x011F, r1
    SWITCH_START(rq->bRequest)
 7c2:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 7c4:	81 11       	cpse	r24, r1
 7c6:	06 c0       	rjmp	.+12     	; 0x7d4 <usbPoll+0x64>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 7c8:	10 92 20 01 	sts	0x0120, r1
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
 7cc:	2f e1       	ldi	r18, 0x1F	; 31
 7ce:	31 e0       	ldi	r19, 0x01	; 1
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
 7d0:	82 e0       	ldi	r24, 0x02	; 2
 7d2:	6a c0       	rjmp	.+212    	; 0x8a8 <usbPoll+0x138>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 7d4:	85 30       	cpi	r24, 0x05	; 5
 7d6:	19 f4       	brne	.+6      	; 0x7de <usbPoll+0x6e>
        usbNewDeviceAddr = value;
 7d8:	90 93 33 01 	sts	0x0133, r25
 7dc:	62 c0       	rjmp	.+196    	; 0x8a2 <usbPoll+0x132>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 7de:	86 30       	cpi	r24, 0x06	; 6
 7e0:	09 f0       	breq	.+2      	; 0x7e4 <usbPoll+0x74>
 7e2:	49 c0       	rjmp	.+146    	; 0x876 <usbPoll+0x106>
    usbTxLen1 = USBPID_NAK;
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
 7e4:	8b 81       	ldd	r24, Y+3	; 0x03
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 7e6:	81 30       	cpi	r24, 0x01	; 1
 7e8:	19 f4       	brne	.+6      	; 0x7f0 <usbPoll+0x80>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 7ea:	82 ec       	ldi	r24, 0xC2	; 194
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	24 c0       	rjmp	.+72     	; 0x838 <usbPoll+0xc8>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 7f0:	82 30       	cpi	r24, 0x02	; 2
 7f2:	41 f4       	brne	.+16     	; 0x804 <usbPoll+0x94>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 7f4:	80 ea       	ldi	r24, 0xA0	; 160
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	90 93 31 01 	sts	0x0131, r25
 7fc:	80 93 30 01 	sts	0x0130, r24
 800:	82 e2       	ldi	r24, 0x22	; 34
 802:	35 c0       	rjmp	.+106    	; 0x86e <usbPoll+0xfe>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 804:	83 30       	cpi	r24, 0x03	; 3
 806:	f1 f4       	brne	.+60     	; 0x844 <usbPoll+0xd4>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
 808:	91 11       	cpse	r25, r1
 80a:	08 c0       	rjmp	.+16     	; 0x81c <usbPoll+0xac>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 80c:	80 e1       	ldi	r24, 0x10	; 16
 80e:	91 e0       	ldi	r25, 0x01	; 1
 810:	90 93 31 01 	sts	0x0131, r25
 814:	80 93 30 01 	sts	0x0130, r24
 818:	84 e0       	ldi	r24, 0x04	; 4
 81a:	29 c0       	rjmp	.+82     	; 0x86e <usbPoll+0xfe>
        SWITCH_CASE(1)
 81c:	91 30       	cpi	r25, 0x01	; 1
 81e:	41 f4       	brne	.+16     	; 0x830 <usbPoll+0xc0>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 820:	86 ee       	ldi	r24, 0xE6	; 230
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	90 93 31 01 	sts	0x0131, r25
 828:	80 93 30 01 	sts	0x0130, r24
 82c:	8a e2       	ldi	r24, 0x2A	; 42
 82e:	1f c0       	rjmp	.+62     	; 0x86e <usbPoll+0xfe>
        SWITCH_CASE(2)
 830:	92 30       	cpi	r25, 0x02	; 2
 832:	e1 f4       	brne	.+56     	; 0x86c <usbPoll+0xfc>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 834:	84 ed       	ldi	r24, 0xD4	; 212
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	90 93 31 01 	sts	0x0131, r25
 83c:	80 93 30 01 	sts	0x0130, r24
 840:	82 e1       	ldi	r24, 0x12	; 18
 842:	15 c0       	rjmp	.+42     	; 0x86e <usbPoll+0xfe>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
 844:	81 32       	cpi	r24, 0x21	; 33
 846:	41 f4       	brne	.+16     	; 0x858 <usbPoll+0xe8>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 848:	82 eb       	ldi	r24, 0xB2	; 178
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	90 93 31 01 	sts	0x0131, r25
 850:	80 93 30 01 	sts	0x0130, r24
 854:	89 e0       	ldi	r24, 0x09	; 9
 856:	0b c0       	rjmp	.+22     	; 0x86e <usbPoll+0xfe>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
 858:	82 32       	cpi	r24, 0x22	; 34
 85a:	41 f4       	brne	.+16     	; 0x86c <usbPoll+0xfc>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 85c:	88 e6       	ldi	r24, 0x68	; 104
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	90 93 31 01 	sts	0x0131, r25
 864:	80 93 30 01 	sts	0x0130, r24
 868:	88 e3       	ldi	r24, 0x38	; 56
 86a:	01 c0       	rjmp	.+2      	; 0x86e <usbPoll+0xfe>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 86c:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 86e:	90 e4       	ldi	r25, 0x40	; 64
 870:	90 93 15 01 	sts	0x0115, r25
 874:	1d c0       	rjmp	.+58     	; 0x8b0 <usbPoll+0x140>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 876:	88 30       	cpi	r24, 0x08	; 8
 878:	69 f0       	breq	.+26     	; 0x894 <usbPoll+0x124>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 87a:	89 30       	cpi	r24, 0x09	; 9
 87c:	19 f4       	brne	.+6      	; 0x884 <usbPoll+0x114>
        usbConfiguration = value;
 87e:	90 93 35 01 	sts	0x0135, r25
 882:	0f c0       	rjmp	.+30     	; 0x8a2 <usbPoll+0x132>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 884:	8a 30       	cpi	r24, 0x0A	; 10
 886:	49 f0       	breq	.+18     	; 0x89a <usbPoll+0x12a>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 888:	8b 30       	cpi	r24, 0x0B	; 11
 88a:	59 f4       	brne	.+22     	; 0x8a2 <usbPoll+0x132>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 88c:	8b e4       	ldi	r24, 0x4B	; 75
 88e:	80 93 22 01 	sts	0x0122, r24
 892:	07 c0       	rjmp	.+14     	; 0x8a2 <usbPoll+0x132>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
 894:	25 e3       	ldi	r18, 0x35	; 53
 896:	31 e0       	ldi	r19, 0x01	; 1
 898:	02 c0       	rjmp	.+4      	; 0x89e <usbPoll+0x12e>
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
 89a:	2f e1       	ldi	r18, 0x1F	; 31
 89c:	31 e0       	ldi	r19, 0x01	; 1
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	03 c0       	rjmp	.+6      	; 0x8a8 <usbPoll+0x138>
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
 8a2:	2f e1       	ldi	r18, 0x1F	; 31
 8a4:	31 e0       	ldi	r19, 0x01	; 1
 8a6:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
 8a8:	30 93 31 01 	sts	0x0131, r19
 8ac:	20 93 30 01 	sts	0x0130, r18
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 8b0:	9f 81       	ldd	r25, Y+7	; 0x07
 8b2:	91 11       	cpse	r25, r1
 8b4:	04 c0       	rjmp	.+8      	; 0x8be <usbPoll+0x14e>
 8b6:	9e 81       	ldd	r25, Y+6	; 0x06
 8b8:	98 17       	cp	r25, r24
 8ba:	08 f4       	brcc	.+2      	; 0x8be <usbPoll+0x14e>
 8bc:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 8be:	80 93 02 01 	sts	0x0102, r24
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 8c2:	10 92 32 01 	sts	0x0132, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 8c6:	80 91 01 01 	lds	r24, 0x0101
 8ca:	84 ff       	sbrs	r24, 4
 8cc:	47 c0       	rjmp	.+142    	; 0x95c <__stack+0x5d>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 8ce:	80 91 02 01 	lds	r24, 0x0102
 8d2:	8f 3f       	cpi	r24, 0xFF	; 255
 8d4:	09 f4       	brne	.+2      	; 0x8d8 <usbPoll+0x168>
 8d6:	42 c0       	rjmp	.+132    	; 0x95c <__stack+0x5d>
 8d8:	c8 2f       	mov	r28, r24
 8da:	89 30       	cpi	r24, 0x09	; 9
 8dc:	08 f0       	brcs	.+2      	; 0x8e0 <usbPoll+0x170>
 8de:	c8 e0       	ldi	r28, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 8e0:	8c 1b       	sub	r24, r28
 8e2:	80 93 02 01 	sts	0x0102, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 8e6:	80 91 16 01 	lds	r24, 0x0116
 8ea:	98 e8       	ldi	r25, 0x88	; 136
 8ec:	89 27       	eor	r24, r25
 8ee:	80 93 16 01 	sts	0x0116, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 8f2:	cc 23       	and	r28, r28
 8f4:	31 f1       	breq	.+76     	; 0x942 <__stack+0x43>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
 8f6:	20 91 30 01 	lds	r18, 0x0130
 8fa:	30 91 31 01 	lds	r19, 0x0131
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 8fe:	80 91 15 01 	lds	r24, 0x0115
 902:	86 ff       	sbrs	r24, 6
 904:	0b c0       	rjmp	.+22     	; 0x91c <__stack+0x1d>
 906:	f9 01       	movw	r30, r18
 908:	a7 e1       	ldi	r26, 0x17	; 23
 90a:	b1 e0       	ldi	r27, 0x01	; 1
#endif
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
 90c:	8c 2f       	mov	r24, r28
 90e:	8a 0f       	add	r24, r26
#endif
        {
            uchar i = len, *r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 910:	94 91       	lpm	r25, Z
                    *data++ = c;
 912:	9d 93       	st	X+, r25
                    r++;
 914:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
 916:	8a 13       	cpse	r24, r26
 918:	fb cf       	rjmp	.-10     	; 0x910 <__stack+0x11>
 91a:	09 c0       	rjmp	.+18     	; 0x92e <__stack+0x2f>
 91c:	d9 01       	movw	r26, r18
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 91e:	e7 e1       	ldi	r30, 0x17	; 23
 920:	f1 e0       	ldi	r31, 0x01	; 1
#endif
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
 922:	8c 2f       	mov	r24, r28
 924:	8e 0f       	add	r24, r30
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
 926:	9d 91       	ld	r25, X+
 928:	91 93       	st	Z+, r25
                }while(--i);
 92a:	8e 13       	cpse	r24, r30
 92c:	fc cf       	rjmp	.-8      	; 0x926 <__stack+0x27>
#endif
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
 92e:	8c 2f       	mov	r24, r28
 930:	81 50       	subi	r24, 0x01	; 1
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	01 96       	adiw	r24, 0x01	; 1
 936:	82 0f       	add	r24, r18
 938:	93 1f       	adc	r25, r19
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
                }while(--i);
            }
            usbMsgPtr = r;
 93a:	90 93 31 01 	sts	0x0131, r25
 93e:	80 93 30 01 	sts	0x0130, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 942:	6c 2f       	mov	r22, r28
 944:	87 e1       	ldi	r24, 0x17	; 23
 946:	91 e0       	ldi	r25, 0x01	; 1
 948:	0e 94 be 00 	call	0x17c	; 0x17c <usbCrc16Append>
        len += 4;           /* length including sync byte */
 94c:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 94e:	cc 30       	cpi	r28, 0x0C	; 12
 950:	19 f0       	breq	.+6      	; 0x958 <__stack+0x59>
            usbMsgLen = USB_NO_MSG;
 952:	8f ef       	ldi	r24, 0xFF	; 255
 954:	80 93 02 01 	sts	0x0102, r24
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 958:	c0 93 01 01 	sts	0x0101, r28
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 95c:	84 e1       	ldi	r24, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 95e:	99 b1       	in	r25, 0x09	; 9
 960:	9c 70       	andi	r25, 0x0C	; 12
        if(usbLineStatus != 0)  /* SE0 has ended */
 962:	31 f4       	brne	.+12     	; 0x970 <__stack+0x71>
 964:	81 50       	subi	r24, 0x01	; 1
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 966:	d9 f7       	brne	.-10     	; 0x95e <__stack+0x5f>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 968:	10 92 33 01 	sts	0x0133, r1
    usbDeviceAddr = 0;
 96c:	10 92 2d 01 	sts	0x012D, r1
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 970:	df 91       	pop	r29
 972:	cf 91       	pop	r28
 974:	08 95       	ret

00000976 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 976:	e9 e6       	ldi	r30, 0x69	; 105
 978:	f0 e0       	ldi	r31, 0x00	; 0
 97a:	80 81       	ld	r24, Z
 97c:	82 60       	ori	r24, 0x02	; 2
 97e:	80 83       	st	Z, r24
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 980:	e8 9a       	sbi	0x1d, 0	; 29
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 982:	8b e4       	ldi	r24, 0x4B	; 75
 984:	80 93 22 01 	sts	0x0122, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 988:	8a e5       	ldi	r24, 0x5A	; 90
 98a:	80 93 21 01 	sts	0x0121, r24
 98e:	08 95       	ret

00000990 <exit>:
 990:	f8 94       	cli
 992:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <_exit>

00000996 <memcmp>:
 996:	fb 01       	movw	r30, r22
 998:	dc 01       	movw	r26, r24
 99a:	04 c0       	rjmp	.+8      	; 0x9a4 <memcmp+0xe>
 99c:	8d 91       	ld	r24, X+
 99e:	01 90       	ld	r0, Z+
 9a0:	80 19       	sub	r24, r0
 9a2:	21 f4       	brne	.+8      	; 0x9ac <memcmp+0x16>
 9a4:	41 50       	subi	r20, 0x01	; 1
 9a6:	50 40       	sbci	r21, 0x00	; 0
 9a8:	c8 f7       	brcc	.-14     	; 0x99c <memcmp+0x6>
 9aa:	88 1b       	sub	r24, r24
 9ac:	99 0b       	sbc	r25, r25
 9ae:	08 95       	ret

000009b0 <__umulhisi3>:
 9b0:	a2 9f       	mul	r26, r18
 9b2:	b0 01       	movw	r22, r0
 9b4:	b3 9f       	mul	r27, r19
 9b6:	c0 01       	movw	r24, r0
 9b8:	a3 9f       	mul	r26, r19
 9ba:	01 d0       	rcall	.+2      	; 0x9be <__umulhisi3+0xe>
 9bc:	b2 9f       	mul	r27, r18
 9be:	70 0d       	add	r23, r0
 9c0:	81 1d       	adc	r24, r1
 9c2:	11 24       	eor	r1, r1
 9c4:	91 1d       	adc	r25, r1
 9c6:	08 95       	ret

000009c8 <_exit>:
 9c8:	f8 94       	cli

000009ca <__stop_program>:
 9ca:	ff cf       	rjmp	.-2      	; 0x9ca <__stop_program>
